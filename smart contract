// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract SimpleBank {

    struct ClientAccount {
        int clientId; // Client ID
        address clientAddress; // Client Address
        uint clientBalanceInEther; // Client Ether balance
    }

    ClientAccount[] public clients; // Array to store client accounts
    int public clientCounter;
    address payable public manager; // Manager address, payable to receive Ether

    // Modifier to restrict access to the manager only
    modifier onlyManager() {
        require(msg.sender == manager, "Only manager can call this!");
        _;
    }

    // Modifier to restrict access to registered clients only
    modifier onlyClients() {
        bool isClient = false;
        for (uint i = 0; i < clients.length; i++) {
            if (clients[i].clientAddress == msg.sender) {
                isClient = true;
                break;
            }
        }
        require(isClient, "Only clients can call this!");
        _;
    }

    // Constructor to initialize client counter
    constructor() {
        clientCounter = 0;
    }

    // Fallback function to allow the contract to receive Ether
    receive() external payable {}

    // Function to set the manager's address
    function setManager(address managerAddress) public returns (string memory) {
        manager = payable(managerAddress);
        return "Manager set successfully";
    }

    // Function for a user to join as a client
    function joinAsClient() public payable returns (string memory) {
        clients.push(ClientAccount(clientCounter++, msg.sender, address(msg.sender).balance));
        return "Client joined successfully";
    }

    // Function for clients to deposit Ether into the contract
    function deposit() public payable onlyClients {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        payable(address(this)).transfer(msg.value);
    }

    // Function for clients to withdraw Ether from the contract
    function withdraw(uint amount) public payable onlyClients {
        require(amount * 1 ether <= address(this).balance, "Insufficient balance in contract");
        payable(msg.sender).transfer(amount * 1 ether);
    }

    // Function for the manager to distribute interest to all clients
    function sendInterest() public payable onlyManager {
        for (uint i = 0; i < clients.length; i++) {
            payable(clients[i].clientAddress).transfer(1 ether);
        }
    }

    // Function to get the contract's total balance
    function getContractBalance() public view returns (uint) {
        return address(this).balance;
    }
}
